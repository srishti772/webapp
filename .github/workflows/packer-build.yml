name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  packer-build:
    runs-on: ubuntu-latest
    environment: dev
    if: github.repository == 'csye6225-cloud-srishti/webapp'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip Web App
        run: zip -r webapp.zip .

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm run test:unit

      - name: Set up AWS CLI for Dev
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ vars.PACKER_VERSION }}

      - name: Run Packer init
        run: |
          cd packer 
          packer init ./custom-ami.pkr.hcl

      - name: Create variables.pkr.hcl file
        run: |
          cd packer
          cat <<EOF > variables.pkr.hcl
          AMI_SOURCE_NAME = "${{ vars.AMI_SOURCE_NAME }}"
          AMI_SOURCE_ROOT_DEVICE_TYPE = "${{ vars.AMI_SOURCE_ROOT_DEVICE_TYPE }}"
          AMI_SOURCE_VIRTUALIZATION = "${{ vars.AMI_SOURCE_VIRTUALIZATION }}"
          SOURCE_AMI_OWNERS = ["${{ vars.SOURCE_AMI_OWNERS }}"]

          AMI_REGION = "${{ vars.AWS_REGION }}"
          AMI_NAME = "${{ vars.AMI_NAME }}"
          INSTANCE_TYPE = "${{ vars.INSTANCE_TYPE }}"
          AMI_DESCRIPTION = "${{ vars.AMI_DESCRIPTION }}"
          SSH_USER = "${{ vars.SSH_USER }}"
          VPC_IS_DEFAULT = "${{ vars.VPC_IS_DEFAULT }}"
          AMI_USERS = ["${{ vars.AMI_USERS }}"]
          AWS_PROFILE = "${{ vars.AWS_PROFILE }}"
          EOF
          echo "Contents of variables.pkr.hcl file:"
          cat variables.pkr.hcl

      - name: Format variables.pkr.hcl File
        run: |
          cd packer
          packer fmt variables.pkr.hcl
          echo "Contents of variables.pkr.hcl file:"
          cat variables.pkr.hcl

      - name: Build Image
        id: build
        run: |
          cd packer
          packer build \
          -var-file='./variables.pkr.hcl' \
          ./custom-ami.pkr.hcl

      - name: Upload Manifest
        uses: actions/upload-artifact@v4
        with:
          name: packer-manifest
          path: ./packer/manifest.json

      - name: Set up AWS CLI for Demo
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Set ASG and Launch Template Names
        run: |
          cd packer
          IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d ":" -f2)

          echo "ASG_NAME=${{ vars.ASG_NAME }}" >> $GITHUB_ENV
          echo "LAUNCH_TEMPLATE_NAME=${{ vars.LAUNCH_TEMPLATE_NAME }}" >> $GITHUB_ENV
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV

          echo "IMAGE_ID used: $IMAGE_ID, ASG used: $ASG_NAME, Launch Template used: $LAUNCH_TEMPLATE_NAME"

      - name: Create Launch Template
        run: |
          echo "Creating Launch template"
          aws ec2 create-launch-template-version \
          --launch-template-name $LAUNCH_TEMPLATE_NAME \
          --version-description "Updated AMI version" \
          --launch-template-data "{\"ImageId\":\"$IMAGE_ID\"}"


          TEMPLATE_VERSION=$(aws ec2 describe-launch-templates \
          --launch-template-names $LAUNCH_TEMPLATE_NAME \
          --query "LaunchTemplates[0].LatestVersionNumber" \
          --output text)

          echo "Template Version created: $TEMPLATE_VERSION"
          echo "TEMPLATE_VERSION=$TEMPLATE_VERSION" >> $GITHUB_ENV

          aws ec2 modify-launch-template 
          --launch-template-name $LAUNCH_TEMPLATE_NAME
          --default-version $TEMPLATE_VERSION

      - name: ASG Update and Instance Refresh
        run: |          
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name $ASG_NAME \
          --launch-template LaunchTemplateName="$LAUNCH_TEMPLATE_NAME",Version=$TEMPLATE_VERSION
          
          INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $ASG_NAME --strategy Rolling)
          
          echo "INSTANCE_REFRESH_ID=$INSTANCE_REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for instance refresh to complete
        run: | 
          while true;
          do
            INSTANCE_REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $ASG_NAME  \
            --query "InstanceRefreshes[0].Status" --output text)
          
          printf "%s\n" "$INSTANCE_REFRESH_STATUS"

          if [ "$INSTANCE_REFRESH_STATUS" = "Successful" ]; then
            printf "Instance Refresh "Successful""
            printf "%s\n" "$INSTANCE_REFRESH_STATUS"
            exit 0 
          fi

          if [ "$INSTANCE_REFRESH_STATUS" = "Cancelling" ] || \
            [ "$INSTANCE_REFRESH_STATUS" = "Cancelled" ] || \
            [ "$INSTANCE_REFRESH_STATUS" = "Failed" ]; then
            printf "Instance refresh failed or was cancelled. Exiting with error.\n"
            exit 1 
          fi

          sleep 10
          done         
          